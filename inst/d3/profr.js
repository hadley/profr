// Generated by CoffeeScript 1.3.3
(function() {
  var click, data, id, line_height, margin, mouse_out, mouse_over, redraw, rescale, shown, subset, svg, width, x_scale, y_scale;

  margin = {
    top: 10,
    right: 10,
    bottom: 10,
    left: 10
  };

  line_height = 25;

  svg = d3.select("body").selectAll(".chart").data([1]);

  svg.enter().append("svg");

  data = null;

  shown = null;

  x_scale = null;

  y_scale = null;

  subset = {
    x_min: 0,
    x_max: Infinity,
    y_min: 1
  };

  width = function(d) {
    var left, right;
    left = Math.max(0, x_scale(d.end));
    right = Math.min(x_scale(d.start), subset.x_max);
    return left - right;
  };

  id = function(d) {
    return [d.start, d.level];
  };

  rescale = function() {
    var height, lines, win_height, win_width;
    win_width = window.innerWidth - margin.left - margin.right;
    win_height = window.innerHeight - margin.top - margin.bottom;
    lines = win_height / line_height << 0;
    height = lines * line_height;
    svg.attr("width", win_width).attr("height", win_height);
    if (subset.x_max === Infinity) {
      subset.x_max = d3.max(data, function(d) {
        return d.end;
      });
    }
    x_scale = d3.scale.linear().rangeRound([0, win_width]).domain([subset.x_min, subset.x_max]);
    return y_scale = d3.scale.linear().rangeRound([0, win_height]).domain([subset.y_min - 1, lines + subset.y_min]);
  };

  mouse_over = function(rec) {
    var fun, funs, info, rect;
    info = d3.select(".infobox");
    info.style("display", "block");
    info.select(".name").text(rec.f);
    info.select(".time").text(rec.time);
    funs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        fun = data[_i];
        if (fun.f === rec.f) {
          _results.push(fun);
        }
      }
      return _results;
    })();
    return rect = svg.selectAll("rect").data(funs, id).classed("selected", true);
  };

  mouse_out = function(rec) {
    var fun, funs, rect;
    d3.select(".infobox").style("display", "none");
    funs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        fun = data[_i];
        if (fun.f === rec.f) {
          _results.push(fun);
        }
      }
      return _results;
    })();
    return rect = svg.selectAll("rect").data(funs, id).classed("selected", false);
  };

  click = function(rec) {
    subset.x_min = rec.start;
    subset.x_max = rec.end;
    subset.y_min = rec.level;
    redraw();
    return d3.event.stopPropagation();
  };

  svg.on("click", function() {
    return click({
      start: 0,
      end: Infinity,
      level: 1
    });
  });

  redraw = function() {
    var g, text;
    rescale();
    g = svg.selectAll("g").data(data, id).enter().append("g");
    svg.selectAll("g").data(data, id).transition(750).attr("transform", function(d) {
      return "translate(" + x_scale(d.start) + "," + y_scale(d.level) + ")";
    });
    g.append("rect").on("mouseover", function(d) {
      return mouse_over(d);
    }).on("mouseout", function(d) {
      return mouse_out(d);
    }).on("click", (function(d) {
      return click(d);
    }), false).attr("height", function(d) {
      return line_height + "px";
    });
    svg.selectAll("rect").data(data, id).transition(750).attr("width", width);
    text = g.append("text").text(function(d) {
      return d.f;
    }).attr("y", "18px").attr("x", "5px");
    return text.each(function(d) {
      return this.__width = this.getBBox().width;
    }).style("opacity", function(d) {
      var w;
      w = this.__width;
      if (w === 0) {
        return "none";
      }
      if (w + 8 < width(d)) {
        return 1;
      } else {
        return 0;
      }
    });
  };

  window.onresize = redraw;

  d3.json(window.profr_path, function(d) {
    data = d;
    return redraw();
  });

}).call(this);
